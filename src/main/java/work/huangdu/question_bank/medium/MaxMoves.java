package work.huangdu.question_bank.medium;

/**
 * 2684. 矩阵中移动的最大次数
 * 给你一个下标从 0 开始、大小为 m x n 的矩阵 grid ，矩阵由若干 正 整数组成。
 * 你可以从矩阵第一列中的 任一 单元格出发，按以下方式遍历 grid ：
 * 从单元格 (row, col) 可以移动到 (row - 1, col + 1)、(row, col + 1) 和 (row + 1, col + 1) 三个单元格中任一满足值 严格 大于当前单元格的单元格。
 * 返回你在矩阵中能够 移动 的 最大 次数。
 * 示例 1：
 * 输入：grid = [[2,4,3,5],[5,4,9,3],[3,4,2,11],[10,9,13,15]]
 * 输出：3
 * 解释：可以从单元格 (0, 0) 开始并且按下面的路径移动：
 * - (0, 0) -> (0, 1).
 * - (0, 1) -> (1, 2).
 * - (1, 2) -> (2, 3).
 * 可以证明这是能够移动的最大次数。
 * 示例 2：
 * 输入：grid = [[3,2,4],[2,1,9],[1,1,7]]
 * 输出：0
 * 解释：从第一列的任一单元格开始都无法移动。
 * 提示：
 * m == grid.length
 * n == grid[i].length
 * 2 <= m, n <= 1000
 * 4 <= m * n <= 10^5
 * 1 <= grid[i][j] <= 10^6
 *
 * @author yiyun (huangdu.hd@alibaba-inc.com)
 */
public class MaxMoves {
    public int maxMoves(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[] dp = new int[m];
        for (int j = n - 2; j >= 0; j--) {
            int[] newDp = new int[m];
            for (int i = 0; i < m; i++) {
                for (int k = Math.max(0, i - 1); k <= Math.min(m - 1, i + 1); k++) {
                    newDp[i] = Math.max(newDp[i], grid[k][j + 1] > grid[i][j] ? dp[k] + 1 : 0);
                }
            }
            dp = newDp;
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            ans = Math.max(ans, dp[i]);
        }
        return ans;
    }

    public static void main(String[] args) {
        int[][] grid = {
            {65, 200, 263, 220, 91, 183, 2, 187, 175, 61, 225, 120, 39},
            {111, 242, 294, 31, 241, 90, 145, 25, 262, 214, 145, 71, 294},
            {152, 25, 240, 69, 279, 238, 222, 9, 137, 277, 8, 143, 143},
            {189, 31, 86, 250, 20, 63, 188, 209, 75, 22, 127, 272, 110},
            {122, 94, 298, 25, 90, 169, 68, 3, 208, 274, 202, 135, 275},
            {205, 20, 171, 90, 70, 272, 280, 138, 142, 151, 80, 122, 130},
            {284, 272, 271, 269, 265, 134, 185, 243, 247, 50, 283, 20, 232},
            {266, 236, 265, 234, 249, 62, 98, 130, 122, 226, 285, 168, 204},
            {231, 24, 256, 101, 142, 28, 268, 82, 111, 63, 115, 13, 144},
            {277, 277, 31, 144, 49, 132, 28, 138, 133, 29, 286, 45, 93},
            {163, 96, 25, 9, 3, 159, 148, 59, 25, 81, 233, 127, 12},
            {127, 38, 31, 209, 300, 256, 15, 43, 74, 64, 73, 141, 200}
        };
        MaxMoves mm = new MaxMoves();
        System.out.println(mm.maxMoves(grid));
    }
}
