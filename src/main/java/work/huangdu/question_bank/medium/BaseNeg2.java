package work.huangdu.question_bank.medium;

/**
 * 1017. 负二进制转换
 * 给你一个整数 n ，以二进制字符串的形式返回该整数的 负二进制（base -2）表示。
 * 注意，除非字符串就是 "0"，否则返回的字符串中不能含有前导零。
 * 示例 1：
 * 输入：n = 2
 * 输出："110"
 * 解释：(-2)2 + (-2)1 = 2
 * 示例 2：
 * 输入：n = 3
 * 输出："111"
 * 解释：(-2)2 + (-2)1 + (-2)0 = 3
 * 示例 3：
 * 输入：n = 4
 * 输出："100"
 * 解释：(-2)2 = 4
 * 提示：
 * 0 <= n <= 10^9
 *
 * @author huangdu
 * @version 2023/4/6
 */
public class BaseNeg2 {
    /**
     * 将给定的十进制数除以-2，得到商和余数；
     * 如果余数为负数，则余数加2，商加1；
     * 将余数加入结果字符串中；
     * 将商作为下一次迭代的十进制数，重复步骤1-3直到商为0。
     * 例如，将10转化为-2进制：
     * 10 ÷ -2 = -5 余 0，余数为非负数，直接加入结果字符串中，变为"0"
     * -5 ÷ -2 = 2 余 -1，余数为负数，余数加2变为1，商加1变为3，结果字符串变为"10"
     * 2 ÷ -2 = -1 余 0，余数为非负数，直接加入结果字符串中，变为"100"
     * -1 ÷ -2 = 1 余 -1，余数为负数，余数加2变为1，商加1变为2，结果字符串变为"1100"
     * 1 ÷ -2 = 0 余 1，余数为非负数，直接加入结果字符串中，变为"11001"
     * 因此，10的-2进制表示为"11001"。
     */
    public String baseNeg2(int n) {
        if (n == 0) {return "0";}
        StringBuilder ans = new StringBuilder();
        while (n != 0) {
            int q = n / -2, r = n % -2;
            if (r < 0) {q += 1;}
            ans.insert(0, r == 0 ? '0' : '1');
            n = q;
        }
        return ans.toString();
    }
}
